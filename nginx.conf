# Nginx配置文件 - 针对ONNX OCR服务优化
# 解决大文件上传的缓冲区问题

user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # 日志格式
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'rt=$request_time uct="$upstream_connect_time" '
                    'uht="$upstream_header_time" urt="$upstream_response_time"';

    access_log /var/log/nginx/access.log main;

    # 基础优化
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;

    # 关键配置：解决大文件上传问题
    client_max_body_size 50M;           # 最大文件大小
    client_body_timeout 60s;            # 上传超时
    client_header_timeout 60s;          # 头部超时
    send_timeout 60s;                   # 发送超时
    
    # 重要：禁用请求缓冲，直接流式转发
    proxy_request_buffering off;        # 禁用请求缓冲
    proxy_buffering on;                 # 保持响应缓冲（小响应）
    proxy_buffer_size 4k;
    proxy_buffers 8 4k;

    # 代理超时设置
    proxy_connect_timeout 60s;
    proxy_send_timeout 60s;
    proxy_read_timeout 60s;

    # Gzip压缩
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;

    # 上游服务器配置
    upstream onnx_ocr_backend {
        server onnx-ocr-service:5005;
        keepalive 32;
    }

    server {
        listen 80;
        server_name _;

        # 安全头
        add_header X-Content-Type-Options nosniff;
        add_header X-Frame-Options DENY;
        add_header X-XSS-Protection "1; mode=block";

        # 根路径 - Web UI
        location / {
            proxy_pass http://onnx_ocr_backend;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_set_header Host $http_host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # OCR API接口 - 特别优化
        location /ocr {
            # 关键配置：流式处理大文件
            proxy_request_buffering off;    # 禁用请求缓冲
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            
            # 传递真实IP信息
            proxy_set_header Host $http_host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # 扩展超时用于大文件处理
            proxy_connect_timeout 60s;
            proxy_send_timeout 120s;        # 上传可能较慢
            proxy_read_timeout 120s;        # OCR处理需要时间
            
            proxy_pass http://onnx_ocr_backend;
        }

        # 健康检查
        location /health {
            proxy_pass http://onnx_ocr_backend;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            access_log off;  # 健康检查不记录日志
        }

        # API信息
        location /api/info {
            proxy_pass http://onnx_ocr_backend;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
        }

        # 静态文件缓存（如果有）
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg)$ {
            expires 1M;
            add_header Cache-Control "public, immutable";
            proxy_pass http://onnx_ocr_backend;
        }

        # 错误页面
        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
            root /usr/share/nginx/html;
        }
    }

    # SSL配置示例（生产环境）
    # server {
    #     listen 443 ssl http2;
    #     server_name your-domain.com;
    #     
    #     ssl_certificate /path/to/cert.pem;
    #     ssl_certificate_key /path/to/key.pem;
    #     ssl_protocols TLSv1.2 TLSv1.3;
    #     ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512;
    #     ssl_prefer_server_ciphers off;
    #     
    #     # 其他配置与HTTP相同...
    # }
}