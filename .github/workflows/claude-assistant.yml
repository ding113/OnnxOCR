# .github/workflows/claude-assistant.yml
name: Claude Code Assistant

# ====================================================================================
#  TRIGGERS
#  该工作流会在多种 Issue 和 Pull Request 事件上触发，以确保全面覆盖。
# ====================================================================================
on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  issues:
    types: [opened, assigned]
  pull_request_review:
    types: [submitted]

# ====================================================================================
#  PERMISSIONS
#  为工作流中的所有任务设置 GITHUB_TOKEN 的默认权限。
# ====================================================================================
permissions:
  contents: write          # 允许读写文件和提交代码
  pull-requests: write     # 允许在 PR 上评论、创建分支等
  issues: write            # 允许在 Issue 上评论、添加标签等
  actions: read            # 允许 Claude 读取 CI/CD 的结果
  id-token: write          # Claude GitHub App 进行 OIDC 认证所需

jobs:
  # ====================================================================================
  #  JOB 2: 交互式响应 (INTERACTIVE MODE)
  #  此任务在检测到评论中有 '@claude' 提及后运行，以提供按需帮助。
  # ====================================================================================
  claude-interactive-response:
    runs-on: ubuntu-latest
    # 仅在评论类事件上运行此任务
    if: >
      github.event_name == 'issue_comment' ||
      github.event_name == 'pull_request_review' ||
      github.event_name == 'pull_request_review_comment'
    steps:
      - name: Checkout Repository with Full History
        uses: actions/checkout@v4
        with:
          # 获取所有 git 历史记录，以便 Claude 拥有完整的上下文来响应请求
          fetch-depth: 0

      - name: Run Claude Interactive Assistant
        uses: anthropics/claude-code-action@v1
        id: claude-interactive
        env:
          # (可选) 对于拥有自定义部署或代理的用户。
          # 请将您的 URL 存储在名为 CLAUDE_BASE_URL 的 GitHub secret 中。
          ANTHROPIC_BASE_URL: ${{ secrets.CLAUDE_BASE_URL }}
        with:
          # 不提供 'prompt' 会使此任务在交互模式下运行。
          # 它会自动扫描触发工作流的评论内容，寻找触发短语。
          # 此处无需 prompt。

          # 使用 OAuth 令牌进行身份验证 (推荐)。请将其存储在名为 CLAUDE_CODE_OAUTH_TOKEN 的 secret 中。
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          # 或者，您也可以使用 API 密钥 (取消注释下一行)。
          # anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}

          # 默认的触发短语是 '@claude'。如果需要，您可以自定义。
          # trigger_phrase: "/claude"

          # (可选) 授予 Claude 读取 CI/CD 结果的权限。
          additional_permissions: |
            actions: read

          # 使用 claude_args 来配置 Claude 的核心能力。
          claude_args: |
            --system-prompt "ultrathink. You are a world-class AI software engineer with full access to the GitHub API. Be thorough, proactive, and helpful.You can use Github CLI to get more information."
            --mcp-config '{"mcpServers": {"sequential-thinking": {"command": "npx", "args": ["-y", "@modelcontextprotocol/server-sequential-thinking"]}}}'
            --allowedTools "
              Edit,MultiEdit,Write,Read,Glob,Grep,LS,Bash,mcp__sequential-thinking__sequentialthinking
            "
